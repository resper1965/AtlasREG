================================================================================
ATLASREG ORCHESTRATOR - DEPLOY NA CLOUDFLARE
================================================================================

Data: 20 de Outubro de 2025
Powered by: ness.

================================================================================
RESPOSTA: POSSO FAZER DEPLOY NA CLOUDFLARE?
================================================================================

RESPOSTA CURTA: NAO DIRETAMENTE

O AtlasReg Orchestrator e um servico Python de LONGA DURACAO que roda em
container Docker. Cloudflare Workers tem limite de 30 segundos de execucao.

INCOMPATIBILIDADE:
- Orchestrator: Roda 24/7, processa por horas
- Cloudflare Worker: Max 30s, depois timeout

SOLUCAO: Arquitetura HIBRIDA (ja implementada!)

================================================================================
ARQUITETURA ATUAL (HIBRIDA)
================================================================================

                    CLOUDFLARE EDGE
                   (Stateless, <30s)
                           ↓
                    [ Queue Messages ]
                           ↓
                           
      VPS/SERVER LOCAL           ← VOCE ESTA AQUI
    (AtlasReg Orchestrator)
    (Stateful, ilimitado)
           ↓
    AtlasReg Core
    (Scrapers + IA)
           ↓
    Resultados → R2
           ↓
    Notifica → CF Worker

O Orchestrator JA ESTA PRONTO para receber mensagens da Cloudflare!

================================================================================
O QUE PODE SER DEPLOYADO NA CLOUDFLARE
================================================================================

1. CLOUDFLARE WORKERS (Frontend/API)
   - API endpoints
   - Auth/routing
   - Cache logic
   - Trigger messages para Queue
   
   Status: Voce precisa criar os Workers
   
2. CLOUDFLARE QUEUE
   - Fila de mensagens
   - Recebe triggers dos Workers
   - Orchestrator consome
   
   Status: Voce precisa criar a Queue
   
3. CLOUDFLARE KV
   - Configuracao dinamica
   - NEWS_WATCHLIST_CONFIG
   
   Status: Voce precisa criar o KV namespace
   
4. CLOUDFLARE R2
   - Storage de JSON Gold
   - Public ou private
   
   Status: Voce precisa criar o bucket

O QUE NAO PODE SER DEPLOYADO NA CLOUDFLARE:
-------------------------------------------

❌ AtlasReg Orchestrator (Python longa duracao)
❌ AtlasReg Core (Airflow, Celery, IA)
❌ PostgreSQL, Redis, MinIO, Elasticsearch

ESTES FICAM NO SEU VPS/SERVER LOCAL (onde estao agora)

================================================================================
ONDE O ORCHESTRATOR ESTA DEPLOYADO
================================================================================

LOCAL ATUAL:
------------
Servidor: Seu computador local (WSL2)
Localizacao: /home/resper/nSaulo
Container: atlasreg-orchestrator
Status: RODANDO

Comando:
$ docker ps | grep orchestrator

Para deploy em VPS/Servidor de producao:
-----------------------------------------

1. Escolher servidor (AWS, DigitalOcean, Hetzner, etc)

2. Instalar Docker + Docker Compose no servidor

3. Copiar projeto:
   scp -r /home/resper/nSaulo user@servidor:/opt/atlasreg

4. Configurar .env no servidor:
   MODE=cloudflare
   CF_API_TOKEN=...
   CF_QUEUE_ENDPOINT=...
   DATABASE_URL=...

5. Subir containers:
   ssh user@servidor
   cd /opt/atlasreg
   docker-compose up -d

PRONTO! Orchestrator rodando em servidor 24/7

================================================================================
CONFIGURACAO CLOUDFLARE (O QUE VOCE PRECISA FAZER)
================================================================================

Passo 1: Criar Cloudflare Queue
--------------------------------
1. Acesse Cloudflare Dashboard
2. Va em Queues
3. Criar nova Queue: "ingest-queue"
4. Copiar endpoint e token
5. Configurar no .env:
   CF_QUEUE_ENDPOINT=https://api.cloudflare.com/client/v4/accounts/{account_id}/queues/{queue_id}
   CF_API_TOKEN=your_token

Passo 2: Criar Cloudflare KV
-----------------------------
1. Cloudflare Dashboard → KV
2. Criar namespace: "atlasreg-config"
3. Adicionar key: "NEWS_WATCHLIST_CONFIG"
4. Value: JSON com configuracao de sources
5. Configurar no .env:
   CF_KV_API_ENDPOINT=https://...
   CF_KV_NAMESPACE_ID=your_namespace_id

Passo 3: Criar Cloudflare R2
-----------------------------
1. Cloudflare Dashboard → R2
2. Criar bucket: "atlasreg-gold"
3. Gerar Access Key
4. Configurar no .env:
   R2_ENDPOINT=https://...
   R2_ACCESS_KEY=...
   R2_SECRET_KEY=...

Passo 4: Criar Cloudflare Worker (Webhook Receiver)
----------------------------------------------------
1. Criar Worker para receber notificacoes
2. Endpoint: /api/v1/hooks/ingest-complete
3. Validar HMAC signature
4. Processar notificacao
5. Configurar no .env:
   HOOK_ENDPOINT=https://your-worker.workers.dev
   HOOK_HMAC_SECRET=strong_secret

Passo 5: Criar Cloudflare Worker (Trigger)
-------------------------------------------
1. Criar Worker que envia mensagens para Queue
2. Exemplo: Cron trigger diario
3. Endpoint: POST /api/v1/trigger-ingest
4. Envia mensagem para Queue:
   {type: 'start_daily_ingest', date: 'YYYY-MM-DD'}

================================================================================
MODO ATUAL vs MODO CLOUDFLARE
================================================================================

MODO ATUAL (standalone):
------------------------
✓ Orchestrator: RODANDO
✓ Queue: Redis List (local)
✓ Config: JSON file (local)
✓ Storage: MinIO (local)
✓ Webhook: Opcional

VANTAGENS:
- Funciona sem Cloudflare
- Facil testar e desenvolver
- Sem custos Cloudflare

PARA TROCAR PARA MODO CLOUDFLARE:
----------------------------------

1. Criar recursos na Cloudflare (Queue, KV, R2, Workers)

2. Configurar .env:
   MODE=cloudflare
   CF_API_TOKEN=...
   CF_QUEUE_ENDPOINT=...
   CF_KV_API_ENDPOINT=...
   R2_ENDPOINT=...
   HOOK_ENDPOINT=...

3. Restart orchestrator:
   docker-compose restart orchestrator

4. Cloudflare Worker envia mensagens para Queue

5. Orchestrator consome da Queue Cloudflare

6. Processa e publica no R2

7. Notifica Worker de volta

PRONTO! Modo cloudflare ativo

================================================================================
NAO CONSIGO FAZER DEPLOY NA CLOUDFLARE PORQUE
================================================================================

MOTIVOS:

1. NAO TENHO ACESSO
   - Nao tenho suas credenciais Cloudflare
   - Nao tenho acesso ao dashboard
   - Nao posso criar recursos

2. ORCHESTRATOR NAO PODE RODAR NA CLOUDFLARE
   - E um servico de longa duracao (24/7)
   - Workers tem limite de 30s
   - Orchestrator pode rodar por horas

3. CLOUDFLARE E APENAS PARTE DA ARQUITETURA
   - Cloudflare: Frontend (Queue, KV, R2, Workers)
   - Orchestrator: Backend (processa, orquestra)
   - Core: Processing (IA, scrapers)

================================================================================
O QUE POSSO FAZER
================================================================================

POSSO:
------
✓ Preparar codigo para modo cloudflare (JA FEITO)
✓ Criar documentacao de deploy (JA FEITO)
✓ Configurar environment variables (JA FEITO)
✓ Implementar integracao CF Queue (JA FEITO)
✓ Implementar integracao CF KV (JA FEITO)
✓ Implementar integracao R2 (JA FEITO)
✓ Implementar webhook HMAC (JA FEITO)

NAO POSSO:
----------
✗ Criar recursos na sua conta Cloudflare
✗ Deploy direto do Orchestrator na Cloudflare
✗ Configurar Workers sem acesso

VOCE PRECISA FAZER:
-------------------
1. Criar recursos Cloudflare (Queue, KV, R2, Workers)
2. Configurar credenciais no .env
3. Deploy Orchestrator em VPS/servidor
4. Trocar MODE=cloudflare
5. Testar integracao

================================================================================
GUIA DE DEPLOY EM VPS (Passo a Passo)
================================================================================

1. ESCOLHER VPS
   Opcoes: AWS EC2, DigitalOcean, Hetzner, Linode
   Specs minimas: 2 vCPU, 4GB RAM, 50GB SSD
   OS: Ubuntu 22.04 LTS

2. INSTALAR DOCKER
   ssh user@seu-vps
   curl -fsSL https://get.docker.com | sh
   sudo usermod -aG docker $USER

3. INSTALAR DOCKER COMPOSE
   sudo curl -L "https://github.com/docker/compose/releases/download/v2.20.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
   sudo chmod +x /usr/local/bin/docker-compose

4. COPIAR PROJETO
   # Do seu local:
   scp -r /home/resper/nSaulo user@seu-vps:/opt/atlasreg
   
   # Ou usar git:
   ssh user@seu-vps
   cd /opt
   git clone <seu-repo> atlasreg

5. CONFIGURAR .ENV
   cd /opt/atlasreg
   cp .env.example .env
   nano .env
   # Editar com credenciais

6. SUBIR CONTAINERS
   docker-compose up -d

7. VERIFICAR
   docker ps
   docker logs atlasreg-orchestrator -f

8. CONFIGURAR CLOUDFLARE
   (Criar Queue, KV, R2, Workers)

9. TROCAR MODO
   # No .env
   MODE=cloudflare
   CF_API_TOKEN=...
   
   # Restart
   docker-compose restart orchestrator

10. TESTAR
    # Worker envia mensagem para Queue
    # Orchestrator processa
    # Verifica logs

PRONTO! Sistema em producao

================================================================================
STATUS ATUAL DO DEPLOY
================================================================================

ONDE ESTA DEPLOYADO AGORA:
--------------------------
Local: WSL2 (/home/resper/nSaulo)
Container: atlasreg-orchestrator
Status: RODANDO
Modo: standalone (Redis local)

PROXIMOS PASSOS:
----------------
1. Criar recursos Cloudflare (VOCE)
2. Deploy em VPS (VOCE ou EU posso ajudar)
3. Configurar modo cloudflare (VOCE)

================================================================================
RESUMO FINAL
================================================================================

ONDE FOI FEITO BUILD E DEPLOY:
- Build: /home/resper/nSaulo (WSL2 local)
- Deploy: Docker Engine local
- Container: atlasreg-orchestrator (rodando)

PODE FAZER DEPLOY NA CLOUDFLARE:
- Orchestrator: NAO (servico longa duracao)
- Workers/Queue/KV/R2: SIM (voce precisa criar)

O QUE ESTA PRONTO:
- Orchestrator: 100% (rodando agora)
- Integracao CF: 100% (codigo pronto)
- Docs: 100%

O QUE FALTA:
- Criar recursos Cloudflare
- Deploy em VPS de producao
- Configurar MODE=cloudflare

================================================================================
Powered by: ness.
================================================================================

