================================================================================
ATLASREG - ENGINE DE BUSCA DE NOTICIAS
================================================================================

Versao: 1.0
Data: 20 de Outubro de 2025
Powered by: ness.

================================================================================
VISAO GERAL
================================================================================

O AtlasReg possui um sistema de busca hibrido que combina duas tecnologias:

1. BUSCA SEMANTICA (FAISS + SBERT)
   - Busca por significado/conceito
   - Exemplo: "problemas operacionais" encontra "desligamentos", "falhas"
   
2. BUSCA FULL-TEXT (Elasticsearch)
   - Busca por palavras-chave
   - Exemplo: "multa Transmissora X" encontra documentos com essas palavras

O sistema decide automaticamente qual engine usar ou combina ambas.

================================================================================
ARQUITETURA
================================================================================

Fluxo de Dados:

1. COLETA
   - Scrapers (Scrapy/Playwright) coletam noticias de ANEEL, ONS, midia
   - Documentos salvos no MinIO (object storage)
   - Metadata registrada no PostgreSQL

2. PROCESSAMENTO
   - Celery workers processam documentos em background
   - BERTimbau classifica tipo de evento (multa, decisao, transacao, etc)
   - spaCy extrai entidades (empresas, valores, datas)

3. INDEXACAO
   - FAISS: gera embeddings (vetores 768-dim) para busca semantica
   - Elasticsearch: indexa texto para busca por palavras-chave
   - PostgreSQL: armazena eventos estruturados

4. BUSCA
   - API FastAPI recebe queries
   - Query Optimizer decide: semantica, text ou hibrida
   - Score Fusion combina resultados (quando hibrida)
   - Retorna resultados ranqueados

================================================================================
BUSCA SEMANTICA - COMO FUNCIONA
================================================================================

Tecnologia: SBERT (Sentence-BERT) + FAISS

Processo:
1. Texto convertido em vetor numerico (768 dimensoes)
2. Modelo: paraphrase-multilingual-mpnet-base-v2
3. FAISS busca vetores similares por cosine similarity
4. Retorna top-K mais similares (<500ms)

Exemplo:
Query: "problemas com linhas de transmissao"
Encontra: "desligamento de LT 500kV", "queda de torre", "falha em isoladores"
(mesmo sem ter as palavras exatas)

Vantagens:
- Encontra sinonimos automaticamente
- Entende contexto e significado
- Robusto a variacoes de escrita

Limitacoes:
- Nao entende operadores booleanos (AND, OR, NOT)
- Menos preciso para nomes proprios
- Mais lento que busca por keyword

================================================================================
BUSCA FULL-TEXT - COMO FUNCIONA
================================================================================

Tecnologia: Elasticsearch 8.11.0

Processo:
1. Texto tokenizado e normalizado (brazilian analyzer)
2. Stop words removidas ("a", "o", "de", etc)
3. Stemming aplicado (aplicar -> aplic, multa -> mult)
4. Inverted index criado
5. Query busca no index

Exemplo:
Query: "multa Transmissora X" + filtros (data>2025-01-01, valor>1M)
Encontra: documentos com palavras "multa" E "Transmissora X" nos filtros

Vantagens:
- Muito rapido (<50ms)
- Suporta filtros complexos
- Operadores booleanos (AND, OR, NOT)
- Agregacoes (facets, histogramas)

Limitacoes:
- Precisa de palavras exatas (com stemming)
- Nao entende sinonimos ou parafrase
- Menos "inteligente" que busca semantica

================================================================================
BUSCA HIBRIDA - SCORE FUSION
================================================================================

Combina resultados de FAISS e Elasticsearch usando RRF (Reciprocal Rank Fusion).

Formula: RRF Score = soma(1 / (60 + rank))

Exemplo:
Query: "multa por atraso"

FAISS resultados:
1. doc_123 (0.92)
2. doc_456 (0.87)

Elasticsearch resultados:
1. doc_456 (score: 8.5)
2. doc_123 (score: 6.8)

RRF Fusion:
1. doc_456 (aparece bem nas duas -> score mais alto)
2. doc_123 (tambem aparece nas duas)

================================================================================
API ENDPOINTS
================================================================================

1. Busca Simples
   GET /api/v1/search?q=multa&limit=10
   
2. Busca Avancada
   POST /api/v1/search/advanced
   Body: {query, filters, sort, page, search_mode}
   
3. Busca Semantica
   POST /api/v1/search/semantic
   Body: {query, top_k, min_similarity}
   
4. Autocomplete
   GET /api/v1/search/suggest?q=mul&limit=5
   
5. Facets
   GET /api/v1/search/facets?q=multa
   
6. Export
   POST /api/v1/search/export
   Body: {query, filters, format: csv|json|pdf}

================================================================================
PERFORMANCE
================================================================================

Metricas (ambiente: 4 vCPU, 8GB RAM):

- Busca Semantica: 120ms (p50), 280ms (p95)
- Busca Full-Text: 45ms (p50), 150ms (p95)
- Busca Hibrida: 180ms (p50), 350ms (p95)
- Indexacao FAISS: 85ms por documento
- Indexacao Elasticsearch: 35ms por documento

Throughput:
- Semantica: ~100 queries/segundo
- Full-Text: ~500 queries/segundo
- Hibrida: ~80 queries/segundo

================================================================================
STACK TECNOLOGICO
================================================================================

Frontend:
- Next.js 15.5.5
- Porta: 3100
- URL: http://localhost:3100

Backend:
- FastAPI (Python)
- Porta: 8200
- URL: http://localhost:8200

Busca Semantica:
- SBERT: paraphrase-multilingual-mpnet-base-v2
- FAISS: IndexFlatIP (768 dimensoes)
- Armazenamento: disk (atlasreg_events.index)

Busca Full-Text:
- Elasticsearch 8.11.0
- Porta: 9300
- URL: http://localhost:9300
- Index: atlasreg_events
- Analyzer: brazilian

Storage:
- MinIO (S3-compatible)
- Porta: 9200 (API), 9201 (Console)
- Documentos raw

Database:
- PostgreSQL (via DATABASE_URL)
- Eventos estruturados
- Metadata de documentos

Cache:
- Redis 7
- Porta: 6382
- Cache de queries e embeddings

Processamento:
- Celery + Redis
- Workers: indexacao, classificacao
- Flower UI: porta 5600

Orquestracao:
- Apache Airflow 2.7.3
- Porta: 8300
- DAGs de scraping

IA/ML:
- BERTimbau: classificacao de eventos
- spaCy: extracao de entidades
- SBERT: embeddings semanticos

================================================================================
QUANDO USAR CADA TIPO DE BUSCA
================================================================================

Use BUSCA SEMANTICA quando:
- Query eh conceitual/descritiva (5+ palavras)
- Precisa encontrar documentos por significado
- Sinonimos e parafrase sao importantes
- Exemplo: "problemas operacionais causados por tempestades"

Use BUSCA FULL-TEXT quando:
- Query tem termos tecnicos especificos
- Precisa de match exato em nomes/siglas
- Usa operadores booleanos (AND, OR, NOT)
- Tem filtros estruturados (data, valor, empresa)
- Exemplo: "CNPJ 00.000.000/0001-00" ou "Transmissora X"

Use BUSCA HIBRIDA quando:
- Quer melhor dos dois mundos
- Query tem parte conceitual e parte especifica
- Sistema decide automaticamente
- Exemplo: "multa por atraso + empresa Y + valor>1M"

================================================================================
FLUXO COMPLETO DE INDEXACAO
================================================================================

1. Scraper coleta noticia/documento
2. Salva raw no MinIO (bucket: raw-documents/)
3. Registra metadata no PostgreSQL (tabela: documents)
4. Trigger: Celery task process_document

5. Worker processa:
   - Converte PDF para texto (se necessario)
   - Classifica tipo de evento (BERTimbau)
   - Extrai entidades (spaCy)
   - Salva evento no PostgreSQL (tabela: events)

6. Worker indexa:
   - Gera embedding SBERT (768 floats)
   - Adiciona ao FAISS index
   - Indexa no Elasticsearch
   - Atualiza caches

7. Documento disponivel para busca (<2 minutos do scraping)

================================================================================
EXEMPLOS DE USO
================================================================================

Exemplo 1: Buscar multas de empresa especifica

import requests

response = requests.post('http://localhost:8200/api/v1/search/advanced', json={
    "query": "multa",
    "filters": {
        "event_type": ["MULTA"],
        "company_name": "Transmissora ABC",
        "date_from": "2025-01-01",
        "min_amount": 500000
    },
    "sort": {"field": "amount", "order": "desc"}
})

results = response.json()
print(f"Encontradas {results['total']} multas")

---

Exemplo 2: Busca semantica por conceito

response = requests.post('http://localhost:8200/api/v1/search/semantic', json={
    "query": "falhas em isoladores causando desligamentos",
    "top_k": 10,
    "min_similarity": 0.75
})

for event in response.json()['results']:
    print(f"Similaridade: {event['similarity']:.2f} - {event['title']}")

---

Exemplo 3: Export para CSV

response = requests.post('http://localhost:8200/api/v1/search/export', json={
    "query": "transmissora",
    "filters": {"event_type": ["MULTA", "TRANSACAO"]},
    "format": "csv",
    "fields": ["date", "title", "company_name", "amount"]
})

with open('eventos.csv', 'wb') as f:
    f.write(response.content)

================================================================================
TROUBLESHOOTING
================================================================================

Problema: Busca lenta (>500ms)
Solucao:
- Verificar cache de embeddings
- Considerar trocar FAISS para IndexIVFFlat (aproximado)
- Usar GPU para SBERT (10x mais rapido)

Problema: Evento nao aparece na busca
Diagnostico:
- Verificar se evento existe no PostgreSQL
- Verificar count no Elasticsearch
Solucao:
- Re-indexar evento especifico
- Script: python scripts/reindex_all.py

Problema: Resultados irrelevantes
Solucao:
- Ajustar min_similarity para busca semantica
- Usar filtros adicionais
- Trocar para busca full-text se termos forem especificos

================================================================================
DIFERENCIAIS DO SISTEMA
================================================================================

- Totalmente automatizado (scraping + indexacao + busca)
- IA treinada para portugues brasileiro (BERTimbau)
- Busca hibrida inteligente (semantica + keywords)
- Multi-source (ANEEL, ONS, midia especializada)
- Tempo real (10-15min da publicacao ao dashboard)
- Escalavel (100k+ documentos indexados)
- Resiliente (retry automatico, logs, alertas)

================================================================================
RESUMO EXECUTIVO
================================================================================

O AtlasReg possui um sistema de busca de ponta que combina:

1. IA para entender significado (SBERT + FAISS)
2. Busca tradicional rapida (Elasticsearch)
3. Fusao inteligente de resultados (RRF)

Resultado: usuarios encontram informacao relevante seja buscando por conceito
("problemas operacionais") ou por termos especificos ("multa CNPJ X").

Performance: <200ms para maioria das queries
Cobertura: 60-135 documentos coletados automaticamente por dia
Precisao: 85-95% de relevancia nos top-10 resultados

================================================================================
CONTATO
================================================================================

Desenvolvido por: Ricardo Esper (resper@ness.com.br)
Powered by: ness. - Montserrat Medium, ponto em #00ADE8
Ultima atualizacao: 20 de Outubro de 2025

================================================================================
FIM DO DOCUMENTO
================================================================================

